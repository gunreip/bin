#!/usr/bin/env bash
set -euo pipefail

SCRIPT_VERSION="v1.1.0"

PROJECT_PATH=""
ENFORCE=0
WITH_PHPUNIT=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    -p) PROJECT_PATH="${2:-}"; shift 2 ;;
    --enforce) ENFORCE=1; shift ;;
    --with-phpunit) WITH_PHPUNIT=1; shift ;;
    --version) echo "precommit_install.sh $SCRIPT_VERSION"; exit 0 ;;
    *) echo "Unknown parameter: $1" >&2; exit 2 ;;
  esac
done

if [[ -z "${PROJECT_PATH}" ]]; then PROJECT_PATH="$(pwd)"; fi
if [[ ! -d "$PROJECT_PATH" ]]; then echo "❌ Project path not found: $PROJECT_PATH" >&2; exit 2; fi

# Resolve to absolute path
PROJECT_PATH="$(cd "$PROJECT_PATH" && pwd)"

# Ensure it's a git repository
if [[ ! -d "$PROJECT_PATH/.git" ]]; then
  if git -C "$PROJECT_PATH" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    : # ok
  else
    echo "❌ Not a Git repository: $PROJECT_PATH" >&2
    exit 2
  fi
fi

# Determine hooks path
HOOKS_PATH="$(git -C "$PROJECT_PATH" config --get core.hooksPath || true)"
if [[ -z "${HOOKS_PATH}" ]]; then
  HOOKS_PATH="$PROJECT_PATH/.git/hooks"
fi
mkdir -p "$HOOKS_PATH"

HOOK_FILE="$HOOKS_PATH/pre-commit"

cat > "$HOOK_FILE" <<'HOOK'
#!/usr/bin/env bash
set -euo pipefail
# pre-commit generated by precommit_install.sh v1.1.0

# Embedded settings (filled by installer)
PROJECT_PATH="__PROJECT_PATH__"
ENFORCE=__ENFORCE__
WITH_PHPUNIT=__WITH_PHPUNIT__

cd "$PROJECT_PATH"

RED=$'\033[31m'; GREEN=$'\033[32m'; YELLOW=$'\033[33m'; NC=$'\033[0m'
fail() { echo "${RED}[pre-commit] $1: FAIL${NC}"; exit 1; }
ok()   { echo "${GREEN}[pre-commit] $1: OK${NC}"; }

any_failed=0

# --- Pint (Code Style) ---
if [[ -x "vendor/bin/pint" ]]; then
  echo "[pre-commit] pint (--test)"
  if ! out="$(vendor/bin/pint --test 2>&1)"; then
    echo "$out"
    fail "pint (--test)"
  else
    ok "pint (--test)"
  fi
else
  if [[ "$ENFORCE" -eq 1 ]]; then
    echo "${YELLOW}[pre-commit] pint not installed (composer require --dev laravel/pint)${NC}"
    fail "pint missing"
  else
    echo "${YELLOW}[pre-commit] pint not installed – skipping${NC}"
  fi
fi

# --- Larastan (phpstan) ---
PHPSTAN_CFG=""
if [[ -f "phpstan.neon" ]]; then PHPSTAN_CFG="phpstan.neon"; fi
if [[ -z "$PHPSTAN_CFG" && -f "phpstan.neon.dist" ]]; then PHPSTAN_CFG="phpstan.neon.dist"; fi

if [[ -x "vendor/bin/phpstan" && -n "$PHPSTAN_CFG" ]]; then
  echo "[pre-commit] larastan (phpstan analyse)"
  if ! vendor/bin/phpstan analyse --memory-limit=1G; then
    fail "larastan (phpstan analyse)"
  else
    ok "larastan (phpstan analyse)"
  fi
else
  if [[ "$ENFORCE" -eq 1 && -x "vendor/bin/phpstan" ]]; then
    echo "${YELLOW}[pre-commit] phpstan present but no phpstan.neon(.dist) – skipping; add a config to enable analysis${NC}"
  else
    echo "${YELLOW}[pre-commit] larastan skipped (phpstan or config missing)${NC}"
  fi
fi

# --- PHPUnit (optional) ---
if [[ "$WITH_PHPUNIT" -eq 1 ]]; then
  if [[ -x "vendor/bin/phpunit" && ( -d "tests" || -f "phpunit.xml" || -f "phpunit.xml.dist" ) ]]; then
    echo "[pre-commit] phpunit"
    if ! vendor/bin/phpunit; then
      fail "phpunit"
    else
      ok "phpunit"
    fi
  else
    if [[ "$ENFORCE" -eq 1 ]]; then
      echo "${YELLOW}[pre-commit] phpunit requested but not available – skipping${NC}"
    else
      echo "${YELLOW}[pre-commit] phpunit skipped (not installed or no tests)${NC}"
    fi
  fi
fi

echo "${GREEN}[pre-commit] All checks passed.${NC}"
exit 0
HOOK

# Replace placeholders
sed -i "s|__PROJECT_PATH__|$PROJECT_PATH|g" "$HOOK_FILE"
sed -i "s|__ENFORCE__|$ENFORCE|g" "$HOOK_FILE"
sed -i "s|__WITH_PHPUNIT__|$WITH_PHPUNIT|g" "$HOOK_FILE"

chmod +x "$HOOK_FILE"

echo "✅ Installed pre-commit hook at: $HOOK_FILE"
echo "   Enforce: $ENFORCE  ·  With PHPUnit: $WITH_PHPUNIT"
exit 0
